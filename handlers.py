import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from database import (
    load_data, add_announcement, delete_announcement,
    get_announcements_by_user, get_announcements_by_city, get_announcements_by_district
)


router = Router()

main_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='üè† –°–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', callback_data='rent_out'),
            InlineKeyboardButton(text='üîç –°–Ω—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', callback_data='rent')
        ]
    ]
)

out_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', callback_data='add_ad'),
            InlineKeyboardButton(text='üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', callback_data='my_advertisements')
        ]
    ]
)


class AnnouncementStates(StatesGroup):
    price = State()
    district = State()
    photo = State()
    city = State()
    address = State()


class SearchStates(StatesGroup):
    city = State()


@router.message(Command("start"))
async def start_command(message: Message, state: FSMContext):
    await message.answer('üè† **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∂–∏–ª—å—è!**\n\n'
                         '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                         reply_markup=main_keyboard)


@router.callback_query(F.data == 'rent_out')
async def handle_rent_out(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üè† **–í—ã –≤—ã–±—Ä–∞–ª–∏ '–°–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É'.**\n\n"
                                  "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                                  reply_markup=out_keyboard)
    await callback.answer()


@router.callback_query(F.data == 'add_ad')
async def handle_add_ad(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üí∞ **–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É:**')
    await state.set_state(AnnouncementStates.price)
    await callback.answer()


@router.message(AnnouncementStates.price)
async def process_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer('‚ùå **–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await state.update_data(price=message.text)
    await message.answer('üìç **–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω:**')
    await state.set_state(AnnouncementStates.district)


@router.message(AnnouncementStates.district)
async def process_district(message: Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå **–†–∞–π–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await state.update_data(district=message.text)
    await message.answer('üì∑ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–≤–∞—Ä—Ç–∏—Ä—ã:**')
    await state.set_state(AnnouncementStates.photo)


@router.message(AnnouncementStates.photo)
async def process_photo(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(photo=message.photo[-1].file_id)
        await message.answer('üìç **–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:**')
        await state.set_state(AnnouncementStates.city)
    else:
        await message.answer('‚ùå **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.**')


@router.message(AnnouncementStates.city)
async def process_city(message: Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå **–ì–æ—Ä–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return
    await state.update_data(city=message.text)
    await message.answer('üè† **–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã:**')
    await state.set_state(AnnouncementStates.address)


@router.message(AnnouncementStates.address)
async def process_address(message: Message, state: FSMContext):
    if not message.text:
        await message.answer('‚ùå **–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
        return

    await state.update_data(address=message.text)

    data = await state.get_data()

    data['user_id'] = message.from_user.id

    try:
        add_announcement(data)
        await message.answer('‚úÖ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**')
    except ValueError as e:
        await message.answer(f"‚ùå **–û—à–∏–±–∫–∞:** {e}")
    finally:
        await state.clear()


@router.callback_query(F.data == 'rent')
async def handle_rent(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('üîç **–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞:**')
    await state.set_state(SearchStates.city)
    await callback.answer()


@router.message(SearchStates.city)
async def filter_by_city(message: Message, state: FSMContext):
    city = message.text
    announcements = get_announcements_by_city(city.title())
    if not announcements:
        await message.answer('‚ùå **–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ.**')
    else:
        for announcement in announcements:
            await message.answer_photo(
                        announcement['photo'],
                        caption=(
                            f"üè† **–û–±—ä—è–≤–ª–µ–Ω–∏–µ:**\n\n"
                            f"üí∞ **–¶–µ–Ω–∞:** {announcement['price']}\n"
                            f"üìç **–†–∞–π–æ–Ω:** {announcement['district']}\n"
                            f"üåÜ **–ì–æ—Ä–æ–¥:** {announcement['city']}"
                            f"üè° **–ê–¥—Ä–µ—Å:** {announcement['address']}"
                        )
                    )
    await state.clear()


@router.callback_query(F.data == 'my_advertisements')
async def handle_my_advertisements(callback: CallbackQuery):
    user_id = callback.from_user.id
    announcements = get_announcements_by_user(user_id)
    if not announcements:
        await callback.message.answer('‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.**')
    else:
        for announcement in announcements:
            builder = InlineKeyboardBuilder()
            builder.add(InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_{announcement['id']}'))
            await callback.message.answer_photo(
                announcement['photo'],
                caption=(
                    f"üè† **–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:**\n\n"
                    f"üí∞ **–¶–µ–Ω–∞:** {announcement['price']}\n"
                    f"üìç **–†–∞–π–æ–Ω:** {announcement['district']}\n"
                    f"üåÜ **–ì–æ—Ä–æ–¥:** {announcement['city']}"
                    f"üè° **–ê–¥—Ä–µ—Å:** {announcement['address']}"
                ),
                reply_markup=builder.as_markup()
            )


@router.callback_query(F.data.startswith('delete_'))
async def delete_announcement_handler(callback: CallbackQuery):
    announcement_id = callback.data.split('_')[1]
    delete_announcement(announcement_id)
    await callback.message.answer('‚úÖ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.**')
    await callback.answer()
